8. find the unique line in the file:
cat data.txt | sort | uniq -u

9. find the password with = signs in the same line, most of the chars are not human-readable:
strings data.txt | grep "=="

12. hexdump to file:
xxd -r data.txt > /tmp/kek/file

find out what type the file is:
file filename

decompress the gzip file:
gzip -d archv.gz

decompress the bzip file:
bunzip archv

decompress the tar file:
tar -xf data6

13. we have a ssh key, to use it with -i (identity file):
ssh -i sshkey.private b14@localhost

14. connect with nc:
nc localhost 30000
and then send the password

15. connect with ssl:
openssl s_client localhost:30001

16. scan the port range with nmap:
nmap -p 31000-32000 localhost

try to connect with openssl s_client to each port,
save the rsa private key and use it to ssh to the next level.
Note:
had to chmod to restrict permissions from 664 to 600

17. use diff

18. ssh-ing kicks me out immediately, but commands to be executed as soon as we connect can be added:
ssh 18@host cat readme

19. using the binary we can cat the pass for the next level:
./b20-do cat /etc/b_pass/b20

20. start listeneing on any port for ex, 4321
nc -l 4321

then in another shell use the file:
./suconnect 4321

21. cat /etc/cron.d/cj_b22

it points us to /usr/bin/cj_b22.sh
reading it we see it cats the pass to some file

22. start like the previous, read the script and see that it hashes the username.
So execute only the hashing part of the script, but use b23 instead of b22 for the username
to see the pass for next level.

23. similar, look at the script, see that it execs every script and deletes them.
make a script that will print /etc/bpass/b24

cat /etc/bpass/b24 > /tmp/kiro/pass.txt

24. bruteforce:
for x in {0..9999}; do
    echo UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ $x | nc localhost 30002 | grep -v -E 'Wrong|Exit|I am';
done
